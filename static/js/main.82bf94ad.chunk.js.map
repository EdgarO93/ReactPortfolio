{"version":3,"sources":["components/Navigation.js","components/pages/Home.js","components/pages/Portfolio.js","components/pages/Resume.js","components/pages/Contact.js","utils/helpers.js","components/Header.js","App.js","index.js"],"names":["Navigation","currentPage","handlePageChange","className","href","onClick","Home","Portfolio","Resume","Contact","useState","email","setEmail","FullName","setFullName","Message","setMessage","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","name","inputValue","value","onChange","type","placeholder","preventDefault","test","String","toLowerCase","validateEmail","alert","Header","setCurrentPage","page","App","ReactDOM","render","document","getElementById"],"mappings":"uJAoDeA,MAhDf,YAAwD,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,iBACjC,OACE,qBAAIC,UAAU,eAAd,UACE,oBAAIA,UAAU,WAAd,SACE,mBACEC,KAAK,QACLC,QAAS,kBAAMH,EAAiB,SAGhCC,UAA2B,SAAhBF,EAAyB,kBAAoB,WAL1D,wBAUF,oBAAIE,UAAU,WAAd,SACE,mBACEC,KAAK,aACLC,QAAS,kBAAMH,EAAiB,cAEhCC,UAA2B,cAAhBF,EAA8B,kBAAoB,WAJ/D,yBASF,oBAAIE,UAAU,WAAd,SACE,mBACEC,KAAK,UACLC,QAAS,kBAAMH,EAAiB,WAEhCC,UAA2B,WAAhBF,EAA2B,kBAAoB,WAJ5D,sBASF,oBAAIE,UAAU,WAAd,SACE,mBACEC,KAAK,WACLC,QAAS,kBAAMH,EAAiB,YAEhCC,UAA2B,YAAhBF,EAA4B,kBAAoB,WAJ7D,2BCrCO,SAASK,IACtB,OACE,gCACE,+CACA,oSCHS,SAASC,IACtB,OACE,gCACE,iDACA,mDCLS,SAASC,IACtB,OACE,gCACE,wCACA,+CCgFSC,MAjFf,WAGE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,IAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEMC,EAAoB,SAACC,GAEzB,IAAQC,EAAWD,EAAXC,OACFC,EAAYD,EAAOE,KACnBC,EAAaH,EAAOI,MAGR,UAAdH,EACFV,EAASY,GACc,aAAdF,EACTR,EAAYU,GAEZR,EAAWQ,IAuBf,OACE,gCACE,8CACA,wCAAWX,KACX,uBAAMV,UAAU,OAAhB,UACE,uBACEsB,MAAOZ,EACPU,KAAK,WACLG,SAAUP,EACVQ,KAAK,OACLC,YAAY,SAEd,uBACEH,MAAOd,EACPY,KAAK,QACLG,SAAUP,EACVQ,KAAK,QACLC,YAAY,UAEd,0BACEH,MAAOV,EACPQ,KAAK,UACLG,SAAUP,EACVQ,KAAK,OACLC,YAAY,YAEd,wBAAQD,KAAK,SAAStB,QA7CH,SAACe,GAExBA,EAAES,iBC/BC,SAAuBlB,GAE1B,MADW,wJACDmB,KAAKC,OAAOpB,GAAOqB,eDgCxBC,CAActB,IAAWE,GAM9BqB,MAAM,SAAD,OAAUrB,EAAV,4BAGLC,EAAY,IACZE,EAAW,IACXJ,EAAS,KAVPM,EAAgB,iCAuCd,uBAIDD,GACC,8BACE,mBAAGd,UAAU,aAAb,SAA2Bc,UExEtB,SAASkB,IACtB,MAAsCzB,mBAAS,QAA/C,mBAAOT,EAAP,KAAoBmC,EAApB,KAkBA,OACE,gCAEE,cAAC,EAAD,CAAYnC,YAAaA,EAAaC,iBALjB,SAACmC,GAAD,OAAUD,EAAeC,MAZ5B,SAAhBpC,EACK,cAACK,EAAD,IAEW,cAAhBL,EACK,cAACM,EAAD,IAEW,WAAhBN,EACK,cAACO,EAAD,IAEF,cAAC,EAAD,OCnBX,IAEe8B,EAFH,kBAAM,cAACH,EAAD,K,MCElBI,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.82bf94ad.chunk.js","sourcesContent":["import React from 'react';\n\n// Here we are using object destructuring assignment to pluck off our variables from the props object\n// We assign them to their own variable names\nfunction Navigation({ currentPage, handlePageChange }) {\n  return (\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          href=\"#home\"\n          onClick={() => handlePageChange('Home')}\n          // This is a conditional (ternary) operator that checks to see if the current page is \"Home\"\n          // If it is, we set the current page to 'nav-link-active', otherwise we set it to 'nav-link'\n          className={currentPage === 'Home' ? 'nav-link active' : 'nav-link'}\n        >\n          About Me\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          href=\"#portfolio\"\n          onClick={() => handlePageChange('Portfolio')}\n          // Check to see if the currentPage is `Portfolio`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          className={currentPage === 'Portfolio' ? 'nav-link active' : 'nav-link'}\n        >\n          Portfolio\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          href=\"#resume\"\n          onClick={() => handlePageChange('Resume')}\n          // Check to see if the currentPage is `Resume`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          className={currentPage === 'Resume' ? 'nav-link active' : 'nav-link'}\n        >\n          Resume\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          href=\"#contact\"\n          onClick={() => handlePageChange('Contact')}\n          // Check to see if the currentPage is `Contact`, and if so we use the active link class from bootstrap. Otherwise, we set it to a normal nav-link\n          className={currentPage === 'Contact' ? 'nav-link active' : 'nav-link'}\n        >\n          Contact\n        </a>\n      </li>\n    </ul>\n  );\n}\n\nexport default Navigation;\n","import React from 'react';\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>About Me Page</h1>\n      <p>\n      Hi, my name is Edgar. I'm from Chicago. I graduated from American\n            University. I hope to improve my diverse professional experience with new\n            skills in web development. I am currently enrolled in the Northwestern\n            Bootcamp. I am excited to build new projects!\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\n// import Project from './Project';\n\nexport default function Portfolio() {\n  return (\n    <div>\n      <h1>Recent Projects</h1>\n      <p>\n     Portofolio here\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Resume() {\n  return (\n    <div>\n      <h1>Resume</h1>\n      <p>\n        Resume Here\n      </p>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n// import './style.css';\n\nimport { validateEmail } from \"../../utils/helpers\";\n\nfunction Contact() {\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState(\"\");\n  const [FullName, setFullName] = useState(\"\");\n  const [Message, setMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    // Getting the value and name of the input which triggered the change\n    const { target } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, name, and message\n    if (inputType === \"email\") {\n      setEmail(inputValue);\n    } else if (inputType === \"FullName\") {\n      setFullName(inputValue);\n    } else {\n      setMessage(inputValue);\n    }\n  };\n\n  const handleFormSubmit = (e) => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n    // First we check to see if the email is not valid or if the Name is empty. If so we set an error message to be displayed on the page.\n    if (!validateEmail(email) || !FullName) {\n      setErrorMessage(\"Email or username is invalid\");\n      // We want to exit out of this code block if something is wrong so that the user can correct it\n      return;\n      // Then we check to see if the password is not valid. If so, we set an error message regarding the password.\n    }\n    alert(`Hello ${FullName}, thanks for submitting`);\n\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setFullName(\"\");\n    setMessage(\"\");\n    setEmail(\"\");\n  };\n\n  return (\n    <div>\n      <h1>Contact Page</h1>\n      <h2>Hello {FullName}</h2>\n      <form className=\"form\">\n        <input\n          value={FullName}\n          name=\"FullName\"\n          onChange={handleInputChange}\n          type=\"text\"\n          placeholder=\"Name\"\n        />\n        <input\n          value={email}\n          name=\"email\"\n          onChange={handleInputChange}\n          type=\"email\"\n          placeholder=\"email\"\n        />\n        <textarea\n          value={Message}\n          name=\"message\"\n          onChange={handleInputChange}\n          type=\"text\"\n          placeholder=\"Message\"\n        />\n        <button type=\"button\" onClick={handleFormSubmit}>\n          Submit\n        </button>\n      </form>\n      {errorMessage && (\n        <div>\n          <p className=\"error-text\">{errorMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n}\nexport default Contact;\n","export function validateEmail(email) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n  \n","import React, { useState } from 'react';\nimport Navigation from './Navigation';\nimport Home from './pages/Home';\nimport Portfolio from './pages/Portfolio';\nimport Resume from './pages/Resume';\nimport Contact from './pages/Contact';\n\n\nexport default function Header() {\n  const [currentPage, setCurrentPage] = useState('Home');\n\n  // This method is checking to see what the value of `currentPage` is. Depending on the value of currentPage, we return the corresponding component to render.\n  const renderPage = () => {\n    if (currentPage === 'Home') {\n      return <Home />;\n    }\n    if (currentPage === 'Portfolio') {\n      return <Portfolio />;\n    }\n    if (currentPage === 'Resume') {\n      return <Resume />;\n    }\n    return <Contact />;\n  };\n\n  const handlePageChange = (page) => setCurrentPage(page);\n\n  return (\n    <div>\n      {/* We are passing the currentPage from state and the function to update it */}\n      <Navigation currentPage={currentPage} handlePageChange={handlePageChange} />\n      {/* Here we are calling the renderPage method which will return a component  */}\n      {renderPage()}\n    </div>\n  );\n}\n","import React from \"react\";\nimport Header from \"./components/Header\";\n\nconst App = () => <Header />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}